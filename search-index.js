var searchIndex = JSON.parse('{\
"qitoy_berlekamp_massey":{"doc":"","t":"F","n":["berlekamp_massey"],"q":[[0,"qitoy_berlekamp_massey"]],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[8,"ModIntBase"],[3,"Vec"]]},\
"qitoy_binary_search":{"doc":"","t":"IFKK","n":["Int","binary_search","diffgt1","midpoint"],"q":[[0,"qitoy_binary_search"]],"d":["","","",""],"i":[0,0,1,1],"f":[0,[[1,1,2],1],[[],3],[[]]],"c":[],"p":[[8,"Int"],[8,"FnMut"],[15,"bool"]]},\
"qitoy_binary_trie":{"doc":"","t":"SDIKLLLLLLLLLLLLKLLLLL","n":["BITS","BinaryTrie","UInt","as_usize","borrow","borrow_mut","count","default","fmt","from","insert","into","is_empty","len","min","new","one","remove","try_from","try_into","type_id","xor_all"],"q":[[0,"qitoy_binary_trie"]],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[2,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3],"f":[0,0,0,[[],1],[[]],[[]],[[[3,[2]],2],1],[[],[[3,[4]]]],[[[3,[5]],6],7],[[]],[[[3,[2]],2]],[[]],[[[3,[2]]],8],[[[3,[2]]],1],[[[3,[2]]],[[9,[2]]]],[[],[[3,[2]]]],[[]],[[[3,[2]],2]],[[],10],[[],10],[[],11],[[[3,[2]],2]]],"c":[],"p":[[15,"usize"],[8,"UInt"],[3,"BinaryTrie"],[8,"Default"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_bit_util":{"doc":"","t":"ILLL","n":["BitUtil","bit_get","bit_set","one"],"q":[[0,"qitoy_bit_util"]],"d":["","","",""],"i":[0,2,2,2],"f":[0,[[],1],[[]],[[]]],"c":[],"p":[[15,"bool"],[8,"BitUtil"]]},\
"qitoy_bit_vec":{"doc":"","t":"DLLLLLLLLLLLLLLLL","n":["BitVec","at","borrow","borrow_mut","fmt","from","from_iter","into","is_empty","len","rank0","rank1","select0","select1","try_from","try_into","type_id"],"q":[[0,"qitoy_bit_vec"]],"d":["コンパクト辞書","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2],3],[[]],[[]],[[1,4],5],[[]],[6,1],[[]],[1,3],[1,2],[[1,2],2],[[1,2],2],[[1,2],[[7,[2]]]],[[1,2],[[7,[2]]]],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"BitVec"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_bostan_mori":{"doc":"","t":"F","n":["bostan_mori"],"q":[[0,"qitoy_bostan_mori"]],"d":[""],"i":[0],"f":[[1,[[3,[2]]]]],"c":[],"p":[[15,"u64"],[8,"Modulus"],[3,"StaticModInt"]]},\
"qitoy_combi":{"doc":"","t":"DLLLLLLLLLLLL","n":["Combi","borrow","borrow_mut","combi","fact","factinv","from","into","new","perm","try_from","try_into","type_id"],"q":[[0,"qitoy_combi"]],"d":["…","","","$<code>{}_{n}C{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","階乗を返します。 計算量$<code>O(1)</code>$","階乗の逆元を返します。 計算量$<code>O(1)</code>$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>n</code>までの階乗とその逆元を前計算します。 …","$<code>{}_{n}P{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]],3,3],1],[[[2,[1]],3],1],[[[2,[1]],3],1],[[]],[[]],[3,[[2,[1]]]],[[[2,[1]],3,3],1],[[],4],[[],4],[[],5]],"c":[],"p":[[8,"ModIntBase"],[3,"Combi"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_derive":{"doc":"","t":"O","n":["query_readable"],"q":[[0,"qitoy_derive"]],"d":["query_readable!()"],"i":[0],"f":[0],"c":[],"p":[]},\
"qitoy_dfa":{"doc":"","t":"DQDIQKLLLLLLLLLLLKLLLLKLLLLLLLL","n":["AlphaTrans","Alphabet","And","Dfa","State","accept","accept","accept","alpha_trans","and","borrow","borrow","borrow_mut","borrow_mut","calc","from","from","init","init","init","into","into","trans","trans","trans","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"qitoy_dfa"]],"d":["","文字の型","","決定性有限オートマトン","状態の型","受理関数","","","<code>f</code>を通じて異なる<code>Alphabet</code>…","<code>Alphabet</code>が同じDFAの積をとる。","","","","","DFAを用いたDPを計算する。","Returns the argument unchanged.","Returns the argument unchanged.","開始状態","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","遷移関数","","","","","","","",""],"i":[0,2,0,0,2,2,4,5,2,2,4,5,4,5,2,4,5,2,4,5,4,5,2,4,5,4,5,4,5,4,5],"f":[0,0,0,0,0,[[],1],[[[4,[2,3]]],1],[[[5,[2,2]]],1],[[6,3],[[4,[6,3]]]],[[6,2],[[5,[6,2]]]],[[]],[[]],[[]],[[]],[[[0,[7,8]],9,10]],[[]],[[]],[[]],[[[4,[2,3]]]],[[[5,[2,2]]]],[[]],[[]],[[],11],[[[4,[2,3]]],11],[[[5,[2,2]]],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"c":[],"p":[[15,"bool"],[8,"Dfa"],[8,"Fn"],[3,"AlphaTrans"],[3,"And"],[8,"Sized"],[8,"IntoIterator"],[8,"Clone"],[15,"usize"],[8,"FnMut"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_dfa_leq":{"doc":"","t":"DLLLLLLLLLLL","n":["Leq","accept","borrow","borrow_mut","from","init","into","new","trans","try_from","try_into","type_id"],"q":[[0,"qitoy_dfa_leq"]],"d":["<code>n</code>…","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>n</code>を任意の進法で表記した配列から作成する","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[]],[1],[[]],[[],1],[1,3],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"Leq"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_dfa_leq_inv":{"doc":"","t":"DLLLLLLLLLLL","n":["LeqInv","accept","borrow","borrow_mut","from","init","into","new","trans","try_from","try_into","type_id"],"q":[[0,"qitoy_dfa_leq_inv"]],"d":["<code>n</code>…","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>n</code>を任意の進法で表記した配列から作成する","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[]],[1],[[]],[[],1],[1,3],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"LeqInv"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_dfa_multiple_of":{"doc":"","t":"DLLLLLLLLLLL","n":["MultipleOf","accept","borrow","borrow_mut","from","init","into","new","trans","try_from","try_into","type_id"],"q":[[0,"qitoy_dfa_multiple_of"]],"d":["<code>digit</code>進法で表わされる数字のうち、<code>multiple</code>…","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[]],[1],[[]],[[3,3],1],[1,4],[[],5],[[],5],[[],6]],"c":[],"p":[[3,"MultipleOf"],[15,"bool"],[15,"u64"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_dfa_non_zero":{"doc":"","t":"DLLLLLLLLLLLL","n":["NonZero","accept","borrow","borrow_mut","default","from","init","into","new","trans","try_from","try_into","type_id"],"q":[[0,"qitoy_dfa_non_zero"]],"d":["","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[],1],[[]],[1],[[]],[[],1],[1,3],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"NonZero"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_group":{"doc":"","t":"IIK","n":["Abelian","Group","inverse"],"q":[[0,"qitoy_group"]],"d":["","",""],"i":[0,0,1],"f":[0,0,[[]]],"c":[],"p":[[8,"Group"]]},\
"qitoy_hld":{"doc":"","t":"NNDNDEENDDLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLMLMMLMLLLLLLLLMLLMLLLMLLLLLLLLLLLLLLLLLLLLLL","n":["Ascend","Descend","Edge","HeavyPath","Hld","HldDirection","HldInterval","LightEdge","Node","Tree","add_egde","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","depth","deref","deref_mut","eq","euler","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","head","heavy","index","index","into","into","into","into","into","into","is_valid","lca","light","new","new","parent","path_query","set_query","subtree_query","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"qitoy_hld"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self</code>の属するheavy pathの深さ","","","","オイラーツアーで(in, out)","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","<code>self</code>の属するheavy pathの代表元","heavy childのindex","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","light childのindex","","引数の木について、頂点<code>r</code>…","親のindex","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,6,0,5,0,0,0,5,0,0,1,1,3,4,5,6,12,1,3,4,5,6,12,3,4,5,6,3,4,5,6,3,4,4,1,1,3,4,3,4,5,6,12,1,1,3,4,5,6,12,3,1,4,4,12,3,1,3,4,5,6,12,1,12,4,1,12,4,12,12,12,3,3,4,5,6,1,3,4,5,6,12,1,3,4,5,6,12,1,3,4,5,6,12],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],3],[[],4],0,[1],[1],[[3,3],7],0,[[3,8],[[10,[9]]]],[[4,8],11],[[5,8],11],[[6,8],11],[[12,8],11],[[]],[[[14,[13]]],1],[[]],[[]],[[]],[[]],[[]],0,[15,1],0,0,[[12,2]],0,[[]],[[]],[[]],[[]],[[]],[[]],[1,7],[[12,2,2],2],0,[2,1],[[1,2],12],0,[[12,2,2],16],[[12,2],2],[[12,2]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17]],"c":[],"p":[[3,"Tree"],[15,"usize"],[3,"Edge"],[3,"Node"],[4,"HldInterval"],[4,"HldDirection"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"Hld"],[3,"Global"],[3,"Vec"],[8,"IntoIterator"],[8,"Iterator"],[3,"TypeId"]]},\
"qitoy_li_chao_tree":{"doc":"","t":"DLLLLLLLLLLL","n":["LiChaoTree","add_line","add_segment","borrow","borrow_mut","from","get_min","into","new","try_from","try_into","type_id"],"q":[[0,"qitoy_li_chao_tree"]],"d":["","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,2]],[[1,[3,[2]],2,2]],[[]],[[]],[[]],[[1,2],2],[[]],[[[3,[2]]],1],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"LiChaoTree"],[15,"i64"],[3,"Range"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_link_cut_tree":{"doc":"","t":"DLLLLLLLLLLLLL","n":["LinkCutTree","borrow","borrow_mut","cut","drop","fmt","from","into","lca","link","new","try_from","try_into","type_id"],"q":[[0,"qitoy_link_cut_tree"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2]],[1],[[1,3],4],[[]],[[]],[[1,2,2],2],[[1,2,2]],[2,1],[[],5],[[],5],[[],6]],"c":[],"p":[[3,"LinkCutTree"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_math_montgomery":{"doc":"モンゴメリ乗算","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Montgomery","Mvalue","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","mul","neg","new","pow","sub","to_owned","to_owned","trans","try_from","try_from","try_into","try_into","type_id","type_id","val"],"q":[[0,"qitoy_math_montgomery"]],"d":["モンゴメリ乗算をするための構造体。","モンゴメリ乗算で内部的に使われる型。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","<code>modulus</code>で前計算をする。ただし<code>modulus</code>…","","","","","<code>val</code>をモンゴメリ乗算用に変換する。","","","","","","","保有している数値を取り出す。"],"i":[0,0,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,1,2,2,1,2,1,2,1,2,1],"f":[0,0,[[1,1]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[[]],[[]],[[1,1]],[1],[6,2],[[1,6],1],[[1,1]],[[]],[[]],[[2,6],1],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[1,6]],"c":[],"p":[[3,"Mvalue"],[3,"Montgomery"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_math_numeric":{"doc":"","t":"IIKK","n":["Gcd","Lcm","gcd","lcm"],"q":[[0,"qitoy_math_numeric"]],"d":["","","",""],"i":[0,0,1,2],"f":[0,0,[[]],[[]]],"c":[],"p":[[8,"Gcd"],[8,"Lcm"]]},\
"qitoy_matrix":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","column","fmt","from","from","identity","index","index_mut","into","mul","mul_assign","neg","new","pow","row","sub","sub_assign","to_owned","try_from","try_into","type_id"],"q":[[0,"qitoy_matrix"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[1]]],3],[[[2,[[0,[4,1]]]],5],6],[[[7,[7]]],[[2,[1]]]],[[]],[3,[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]]]],[[3,3],[[2,[1]]]],[[[2,[1]],8],[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[],9],[[],9],[[],10]],"c":[],"p":[[8,"Ring"],[3,"Matrix"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_mo":{"doc":"","t":"IQKKKKKL","n":["Mo","T","assign","pop_left","pop_right","push_left","push_right","run"],"q":[[0,"qitoy_mo"]],"d":["","","","","","","","query - 区間クエリ（開区間）"],"i":[0,3,3,3,3,3,3,3],"f":[0,0,[1],[1],[1],[1],[1],[[],2]],"c":[],"p":[[15,"usize"],[3,"Vec"],[8,"Mo"]]},\
"qitoy_nfa":{"doc":"","t":"QIQDKLLLLLKLLLKLLLL","n":["Alphabet","Nfa","State","ToDfa","accept","accept","borrow","borrow_mut","epsilon_closure","from","init","init","into","to_dfa","trans","trans","try_from","try_into","type_id"],"q":[[0,"qitoy_nfa"]],"d":["文字の型","非決定性有限オートマトン","状態の型","","受理関数","","","","","Returns the argument unchanged.","開始状態","","Calls <code>U::from(self)</code>.","","遷移関数","","","",""],"i":[2,0,2,0,2,3,3,3,2,3,2,3,3,2,2,3,3,3,3],"f":[0,0,0,0,[[],1],[[[3,[2]]],1],[[]],[[]],[4,4],[[]],[[],4],[[[3,[2]]]],[[]],[5,[[3,[5]]]],[6,4],[[[3,[2]]],6],[[],7],[[],7],[[],8]],"c":[],"p":[[15,"bool"],[8,"Nfa"],[3,"ToDfa"],[3,"BTreeSet"],[8,"Sized"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_potentialized_unionfind":{"doc":"","t":"IDLLLLLKLLLLLLL","n":["Group","PotentializedUnionfind","borrow","borrow_mut","diff","from","into","inverse","is_same","leader","merge","new","try_from","try_into","type_id"],"q":[[0,"qitoy_potentialized_unionfind"]],"d":["","","","","if <code>self.is_same(x, y)</code>, <code>Some(f)</code>, where <code>y = f(x)</code> else <code>None</code>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","are <code>x</code> and <code>y</code> same group","<code>x</code>’s group’s leader","if <code>x</code> and <code>y</code> are same group, return false otherwise, merge …","create new <code>unionfind with potential</code>","","",""],"i":[0,0,2,2,2,2,2,1,2,2,2,2,2,2,2],"f":[0,0,[[]],[[]],[[[2,[1]],3,3],4],[[]],[[]],[[]],[[[2,[1]],3,3],5],[[[2,[1]],3],3],[[[2,[1]],3,3],5],[3,[[2,[1]]]],[[],6],[[],6],[[],7]],"c":[],"p":[[8,"Group"],[3,"PotentializedUnionfind"],[15,"usize"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_prime_check":{"doc":"","t":"IK","n":["PrimeCheck","prime_check"],"q":[[0,"qitoy_prime_check"]],"d":["","素数判定をする。"],"i":[0,2],"f":[0,[[],1]],"c":[],"p":[[15,"bool"],[8,"PrimeCheck"]]},\
"qitoy_prime_factorize":{"doc":"","t":"IDLLLKLLLLLLLL","n":["Factorize","Factors","borrow","borrow_mut","factorize","find_factor","from","into","into_iter","next","try_from","try_into","type_id","vzip"],"q":[[0,"qitoy_prime_factorize"]],"d":["","","","","<code>self</code>…","<code>self</code>…","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,6,6,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[[],1],[[]],[[]],[[]],[[]],[[[1,[2]]],3],[[],4],[[],4],[[],5],[[]]],"c":[],"p":[[3,"Factors"],[15,"u64"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"Factorize"]]},\
"qitoy_prime_pi":{"doc":"","t":"F","n":["pi"],"q":[[0,"qitoy_prime_pi"]],"d":[""],"i":[0],"f":[[1,1]],"c":[],"p":[[15,"usize"]]},\
"qitoy_prime_sieve":{"doc":"","t":"F","n":["eratosthenes"],"q":[[0,"qitoy_prime_sieve"]],"d":["エラトステネスの篩 計算量$<code>O(n \\\\log n)</code>$"],"i":[0],"f":[[1,[[3,[2]]]]],"c":[],"p":[[15,"usize"],[15,"bool"],[3,"Vec"]]},\
"qitoy_red_black_tree":{"doc":"","t":"QIDQLLLLLKLLKLLLLLKLLLLKLLLKLLLLLLLLLL","n":["F","MAct","RedBlackTree","S","apply","borrow","borrow_mut","clone","clone_into","comp","default","dump","e","erase","fmt","from","from","from_iter","id","insert","into","is_empty","len","map","merge","merge3","new","op","prod","rank","reverse","set","split","split3","to_owned","try_from","try_into","type_id"],"q":[[0,"qitoy_red_black_tree"]],"d":["map type","","","element type","","","","","","composition <code>|x| f(g(x))</code>","","","identity element","","","","Returns the argument unchanged.","","identity map","","Calls <code>U::from(self)</code>.","","","mapping <code>f(x)</code>","","","","binary operation","","","","","","","","","",""],"i":[1,0,0,1,2,2,2,2,2,1,2,2,1,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2],"f":[0,0,0,0,[[[2,[1]],[4,[3]]],[[2,[1]]]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[]],[[],[[2,[1]]]],[[[2,[1]]],5],[[]],[[[2,[1]],3],[[2,[1]]]],[[[2,[1]],6],7],[[[10,[[9,[[8,[[0,[1]]]]]]]]],[[2,[1]]]],[[]],[11,[[2,[1]]]],[[]],[[[2,[1]],3],[[2,[1]]]],[[]],[[[2,[1]]],12],[[[2,[1]]],3],[3],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]],[2,[1]]],[[2,[1]]]],[[],[[2,[1]]]],[[]],[[[2,[1]],[4,[3]]]],[[[2,[1]]],[[9,[3]]]],[[[2,[1]],[4,[3]]],[[2,[1]]]],[[[2,[1]],3],[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],[4,[3]]]],[[]],[[],13],[[],13],[[],14]],"c":[],"p":[[8,"MAct"],[3,"RedBlackTree"],[15,"usize"],[3,"Range"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Rc"],[4,"Option"],[8,"Into"],[8,"IntoIterator"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_rerooting_dp":{"doc":"","t":"DDLLLLLLLLLLLLLLLMLMLLLLFFMLLLLLLL","n":["Edge","Tree","add_egde","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","from","from","from","from","from_iter","index","into","into","is_valid","new","rerooting_dp","rerooting_dp_subtree","to","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"qitoy_rerooting_dp"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,1,1,3,1,3,3,3,3,1,1,3,3,1,1,3,3,1,3,1,3,1,1,0,0,3,3,1,3,1,3,1,3],"f":[0,0,[[1,2,2]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],3],[1],[1],[[3,3],4],[[3,5],[[7,[6]]]],[[[9,[8]]],1],[[]],[[]],0,[10,1],0,[[]],[[]],[1,4],[2,1],[[1,11,11],9],[[1,11,11],[[9,[9]]]],0,[[]],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12]],"c":[],"p":[[3,"Tree"],[15,"usize"],[3,"Edge"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Global"],[3,"Vec"],[8,"IntoIterator"],[8,"FnMut"],[3,"TypeId"]]},\
"qitoy_ring":{"doc":"","t":"DIQDKLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLKLL","n":["AddMul","Ring","S","XorAnd","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","mul","mul","mul","neg","neg","neg","one","one","one","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zero","zero","zero"],"q":[[0,"qitoy_ring"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,0,6,2,3,2,3,2,3,2,3,2,3,2,3,2,3,6,2,3,6,2,3,6,2,3,2,3,2,3,2,3,2,3,6,2,3],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],[[]]],"c":[],"p":[[8,"Clone"],[3,"AddMul"],[3,"XorAnd"],[4,"Result"],[3,"TypeId"],[8,"Ring"]]},\
"qitoy_rolling_hash":{"doc":"ローリングハッシュ","t":"DELLLLLLLLLLLLLLLLLLLLL","n":["RhVec","RollingHash","binary_operation","borrow","borrow","borrow_mut","borrow_mut","from","from","from_iter","get","identity","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"qitoy_rolling_hash"]],"d":["ロリハによる文字列検索のための構造体。","ロリハ <code>Monoid</code>として使う。","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","文字<code>c</code>からロリハを生成する。","","","","","","","",""],"i":[0,0,8,8,2,8,2,8,2,2,2,8,8,2,8,8,2,8,2,8,2,8,2],"f":[0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[2,[4,[3]]]],[[]],[[]],[[]],[5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]]],"c":[],"p":[[8,"IntoIterator"],[3,"RhVec"],[15,"usize"],[3,"Range"],[15,"char"],[4,"Result"],[3,"TypeId"],[4,"RollingHash"]]},\
"qitoy_semigroup":{"doc":"","t":"QIK","n":["S","SemiGroup","binary_operation"],"q":[[0,"qitoy_semigroup"]],"d":["","",""],"i":[1,0,1],"f":[0,0,[[]]],"c":[],"p":[[8,"SemiGroup"]]},\
"qitoy_tree":{"doc":"","t":"DDLLLLLLLLLLLLLLLMLMLLLLMLLLLLLL","n":["Edge","Tree","add_egde","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","from","from","from","from","from_iter","index","into","into","is_valid","new","to","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"qitoy_tree"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,1,1,3,1,3,3,3,3,1,1,3,3,1,1,3,3,1,3,1,3,1,1,3,3,1,3,1,3,1,3],"f":[0,0,[[1,2,2]],[[]],[[]],[[]],[[]],[3,3],[[]],[[],3],[1],[1],[[3,3],4],[[3,5],6],[[]],[7,1],[[]],0,[8,1],0,[[]],[[]],[1,4],[2,1],0,[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[3,"Tree"],[15,"usize"],[3,"Edge"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_utils_bound":{"doc":"配列上の二分探索をします","t":"IQQIKK","n":["LowerBound","T","T","UpperBound","lower_bound","upper_bound"],"q":[[0,"qitoy_utils_bound"]],"d":["","","","","",""],"i":[0,2,3,0,2,3],"f":[0,0,0,0,[[],1],[[],1]],"c":[],"p":[[15,"usize"],[8,"LowerBound"],[8,"UpperBound"]]},\
"qitoy_utils_float2uint":{"doc":"floatとuintを順序を保って相互変換します","t":"QIIQKK","n":["Float","ToFloat","ToUint","Uint","to_float","to_uint"],"q":[[0,"qitoy_utils_float2uint"]],"d":["","","","","",""],"i":[1,0,0,2,1,2],"f":[0,0,0,0,[[]],[[]]],"c":[],"p":[[8,"ToFloat"],[8,"ToUint"]]},\
"qitoy_wavelet_matrix":{"doc":"","t":"DLLLLLLLLLLLLLLL","n":["WaveletMatrix","access","borrow","borrow_mut","fmt","from","from_iter","from_iter","into","is_empty","len","new","rank","try_from","try_into","type_id"],"q":[[0,"qitoy_wavelet_matrix"]],"d":["Wavelet Matrix","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","max data &lt; 1 &lt;&lt; size","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2],3],[[]],[[]],[[1,4],5],[[]],[6,1],[6,1],[[]],[1,7],[1,2],[[[8,[3]],2],1],[[1,3,2],9],[[],10],[[],10],[[],11]],"c":[],"p":[[3,"WaveletMatrix"],[15,"usize"],[15,"u64"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[15,"bool"],[3,"Vec"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"qitoylib":{"doc":"","t":"AAAAAAAAAAIDIIQDKLLLLLLLLLLLLLLKKLLKLLKLLLLLLLLLLLLKLLDIQDLKLLLLLLLLLLLLLLMLMLLLLKKKKFFLMLLLLLLLLLDQQDIDDDIDQQDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIIDDQLLLLLLLKLLLKLLLLLLKLLLKLLLLKLLLLLKLLLLLLLLLLLLLLLFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDILLFLKLLLLFKLLLLODELLLLLLLLLLLLLLLLLLLLLQIIQKK","n":["algebra","algorithm","automaton","data_structure","fps","math","prime","proc","string","utils","Abelian","AddMul","Group","Ring","S","XorAnd","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","inverse","mul","mul","mul","neg","neg","neg","one","one","one","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","zero","zero","Edge","Mo","T","Tree","add_egde","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","from","from","from","from","from_iter","index","into","into","is_valid","new","pop_left","pop_right","push_left","push_right","rerooting_dp","rerooting_dp_subtree","run","to","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AlphaTrans","Alphabet","Alphabet","And","Dfa","Leq","LeqInv","MultipleOf","Nfa","NonZero","State","State","ToDfa","accept","accept","accept","accept","accept","accept","accept","accept","accept","alpha_trans","and","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc","default","epsilon_closure","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","new","new","new","new","to_dfa","trans","trans","trans","trans","trans","trans","trans","trans","trans","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","F","Group","MAct","PotentializedUnionfind","RedBlackTree","S","apply","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","comp","default","diff","dump","e","erase","fmt","from","from","from","from_iter","id","insert","into","into","inverse","is_empty","is_same","leader","len","map","merge","merge","merge3","new","new","op","prod","rank","reverse","set","split","split3","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","berlekamp_massey","bostan_mori","Combi","Matrix","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column","combi","fact","factinv","fmt","from","from","from","identity","index","index_mut","into","into","mul","mul_assign","neg","new","new","perm","pow","row","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Factorize","Factors","PrimeCheck","borrow","borrow_mut","eratosthenes","factorize","find_factor","from","into","into_iter","next","pi","prime_check","try_from","try_into","type_id","vzip","query_readable","RhVec","RollingHash","binary_operation","borrow","borrow","borrow_mut","borrow_mut","from","from","from_iter","get","identity","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Float","ToFloat","ToUint","Uint","to_float","to_uint"],"q":[[0,"qitoylib"],[10,"qitoylib::algebra"],[54,"qitoylib::algorithm"],[98,"qitoylib::automaton"],[204,"qitoylib::data_structure"],[259,"qitoylib::fps"],[261,"qitoylib::math"],[303,"qitoylib::prime"],[321,"qitoylib::proc"],[322,"qitoylib::string"],[345,"qitoylib::utils"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","query - 区間クエリ（開区間）","","","","","","","","","","","","文字の型","文字の型","","決定性有限オートマトン","<code>n</code>…","<code>n</code>…","<code>digit</code>進法で表わされる数字のうち、<code>multiple</code>…","非決定性有限オートマトン","","状態の型","状態の型","","受理関数","受理関数","","","","","","","","<code>f</code>を通じて異なる<code>Alphabet</code>…","<code>Alphabet</code>が同じDFAの積をとる。","","","","","","","","","","","","","","","DFAを用いたDPを計算する。","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","開始状態","開始状態","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>n</code>を任意の進法で表記した配列から作成する","<code>n</code>を任意の進法で表記した配列から作成する","","","","遷移関数","遷移関数","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","map type","","","","","element type","","","","","","","","composition <code>|x| f(g(x))</code>","","if <code>self.is_same(x, y)</code>, <code>Some(f)</code>, where <code>y = f(x)</code> else <code>None</code>","","identity element","","","Returns the argument unchanged.","","Returns the argument unchanged.","","identity map","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","are <code>x</code> and <code>y</code> same group","<code>x</code>’s group’s leader","","mapping <code>f(x)</code>","if <code>x</code> and <code>y</code> are same group, return false otherwise, merge …","","","create new <code>unionfind with potential</code>","","binary operation","","","","","","","","","","","","","","","","","","…","","","","","","","","","","","$<code>{}_{n}C{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","階乗を返します。 計算量$<code>O(1)</code>$","階乗の逆元を返します。 計算量$<code>O(1)</code>$","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>n</code>までの階乗とその逆元を前計算します。 …","","$<code>{}_{n}P{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","","","","","","","","","","","","","","","","","","","エラトステネスの篩 計算量$<code>O(n \\\\log n)</code>$","<code>self</code>…","<code>self</code>…","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","素数判定をする。","","","","","query_readable!()","ロリハによる文字列検索のための構造体。","ロリハ <code>Monoid</code>として使う。","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","文字<code>c</code>からロリハを生成する。","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,41,2,3,2,3,2,3,2,3,2,3,2,3,2,3,33,41,2,3,41,2,3,41,2,3,2,3,2,3,2,3,2,3,2,3,41,2,3,0,0,48,0,6,48,6,8,6,8,8,8,8,6,6,8,8,6,6,8,8,6,8,6,8,6,6,48,48,48,48,0,0,48,8,8,6,8,6,8,6,8,6,8,0,23,19,0,0,0,0,0,0,0,23,19,0,23,19,16,17,18,21,22,24,25,19,19,16,17,18,21,22,24,25,16,17,18,21,22,24,25,19,22,23,16,17,18,21,22,24,25,23,19,16,17,18,21,22,24,25,16,17,18,21,22,24,25,16,17,18,22,23,23,19,16,17,18,21,22,24,25,16,17,18,21,22,24,25,16,17,18,21,22,24,25,16,17,18,21,22,24,25,16,17,18,21,22,24,25,30,0,0,0,0,30,31,34,31,34,31,31,31,30,31,34,31,30,31,31,34,31,31,31,30,31,34,31,33,31,34,34,31,30,34,31,31,34,31,30,31,31,31,31,31,31,31,34,31,34,31,34,31,34,31,0,0,0,0,42,42,43,42,43,42,42,42,42,43,43,43,42,43,42,42,42,42,42,43,42,42,42,42,43,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,0,0,0,45,45,0,49,49,45,45,45,45,0,50,45,45,45,45,0,0,0,51,51,46,51,46,51,46,46,46,51,51,46,51,51,46,51,46,51,46,51,46,52,0,0,53,52,53],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[6,7,7]],[7],[[]],[[]],[[]],[[]],[8,8],[[]],[[],8],[6],[6],[[8,8],9],[[8,10],[[4,[11]]]],[[]],[[[13,[12]]],6],[[]],0,[14,6],0,[[]],[[]],[6,9],[7,6],[7],[7],[7],[7],[[6,15,15],[[13,[12]]]],[[6,15,15],[[13,[[13,[12]],12]]]],[[],[[13,[12]]]],0,[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[16,9],[17,9],[18,9],[[[21,[19,20]]],9],[22,9],[[[24,[23]]],9],[[[25,[19,19]]],9],[[26,20],[[21,[26,20]]]],[[26,19],[[25,[26,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[14,1]],7,15]],[[],22],[[[27,[12]]],[[27,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[27,[12]]]],[[]],[16],[17],[18],[[[21,[19,20]]]],[22],[[[24,[23]]]],[[[25,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],17],[[28,28],18],[[],22],[26,[[24,[26]]]],[29,[[27,[12]]]],[[],29],[16,29],[17,29],[18,29],[[[21,[19,20]]],29],[22,29],[[[24,[23]]],29],[[[25,[19,19]]],29],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[31,[30]],[32,[7]]],[[31,[30]]]],[[]],[[]],[[]],[[]],[[[31,[30]]],[[31,[30]]]],[[]],[[]],[[],[[31,[30]]]],[[[34,[33]],7,7],29],[[[31,[30]]],[[13,[12]]]],[[]],[[[31,[30]],7],[[31,[30]]]],[[[31,[30]],10],[[4,[11]]]],[[]],[[[37,[[29,[[36,[[35,[30]]]]]]]]],[[31,[30]]]],[[]],[14,[[31,[30]]]],[[]],[[[31,[30]],7],[[31,[30]]]],[[]],[[]],[[]],[[[31,[30]]],9],[[[34,[33]],7,7],9],[[[34,[33]],7],7],[[[31,[30]]],7],[7],[[[34,[33]],7,7],9],[[[31,[30]],[31,[30]]],[[31,[30]]]],[[[31,[30]],[31,[30]],[31,[30]]],[[31,[30]]]],[7,[[34,[33]]]],[[],[[31,[30]]]],[[]],[[[31,[30]],[32,[7]]]],[[[31,[30]]],[[29,[7]]]],[[[31,[30]],[32,[7]]],[[31,[30]]]],[[[31,[30]],7],[[31,[30]]]],[[[31,[30]],7]],[[[31,[30]],[32,[7]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],[[],[[13,[38,12]]]],[28,[[40,[39]]]],0,0,[[[42,[41]],[42,[41]]]],[[[42,[41]],[42,[41]]]],[[]],[[]],[[]],[[]],[[[42,[41]]],[[42,[41]]]],[[]],[[[42,[41]]],7],[[[43,[38]],7,7],38],[[[43,[38]],7],38],[[[43,[38]],7],38],[[[42,[[0,[44,41]]]],10],[[4,[11]]]],[[]],[[]],[[[13,[[13,[12]],12]]],[[42,[41]]]],[7,[[42,[41]]]],[[[42,[41]]]],[[[42,[41]]]],[[]],[[]],[[[42,[41]],[42,[41]]]],[[[42,[41]],[42,[41]]]],[[[42,[41]]]],[7,[[43,[38]]]],[[7,7],[[42,[41]]]],[[[43,[38]],7,7],38],[[[42,[41]],28],[[42,[41]]]],[[[42,[41]]],7],[[[42,[41]],[42,[41]]]],[[[42,[41]],[42,[41]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,0,[[]],[[]],[7,[[13,[9,12]]]],[[],45],[[]],[[]],[[]],[[]],[[[45,[28]]],29],[7,7],[[],9],[[],4],[[],4],[[],5],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,46],[[46,[32,[7]]]],[[]],[[]],[[]],[47],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,0,0,[[]],[[]]],"c":[],"p":[[8,"Clone"],[3,"AddMul"],[3,"XorAnd"],[4,"Result"],[3,"TypeId"],[3,"Tree"],[15,"usize"],[3,"Edge"],[15,"bool"],[3,"Formatter"],[3,"Error"],[3,"Global"],[3,"Vec"],[8,"IntoIterator"],[8,"FnMut"],[3,"Leq"],[3,"LeqInv"],[3,"MultipleOf"],[8,"Dfa"],[8,"Fn"],[3,"AlphaTrans"],[3,"NonZero"],[8,"Nfa"],[3,"ToDfa"],[3,"And"],[8,"Sized"],[3,"BTreeSet"],[15,"u64"],[4,"Option"],[8,"MAct"],[3,"RedBlackTree"],[3,"Range"],[8,"Group"],[3,"PotentializedUnionfind"],[3,"Node"],[3,"Rc"],[8,"Into"],[8,"ModIntBase"],[8,"Modulus"],[3,"StaticModInt"],[8,"Ring"],[3,"Matrix"],[3,"Combi"],[8,"Debug"],[3,"Factors"],[3,"RhVec"],[15,"char"],[8,"Mo"],[8,"Factorize"],[8,"PrimeCheck"],[4,"RollingHash"],[8,"ToFloat"],[8,"ToUint"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
