var searchIndex = JSON.parse('{\
"qitoy_algebra_ring":{"doc":"","t":"IKK","n":["Ring","one","zero"],"q":[[0,"qitoy_algebra_ring"]],"d":["","",""],"i":[0,1,1],"f":[0,[[]],[[]]],"c":[],"p":[[8,"Ring"]]},\
"qitoy_combi":{"doc":"","t":"DLLLLLLLLLLLL","n":["Combi","borrow","borrow_mut","combi","fact","factinv","from","into","new","perm","try_from","try_into","type_id"],"q":[[0,"qitoy_combi"]],"d":["…","","","$<code>{}_{n}C{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","階乗を返します。 計算量$<code>O(1)</code>$","階乗の逆元を返します。 計算量$<code>O(1)</code>$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>n</code>までの階乗とその逆元を前計算します。 …","$<code>{}_{n}P{}_{k}</code>$を返します。 計算量$<code>O(1)</code>$","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]],3,3],1],[[[2,[1]],3],1],[[[2,[1]],3],1],[[]],[[]],[3,[[2,[1]]]],[[[2,[1]],3,3],1],[[],4],[[],4],[[],5]],"c":[],"p":[[8,"ModIntBase"],[3,"Combi"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_data_structure_bit_vec":{"doc":"","t":"DLLLLLLLLLLLLLLLL","n":["BitVec","at","borrow","borrow_mut","fmt","from","from","into","len","rank0","rank1","select0","select1","try_from","try_into","type_id","vzip"],"q":[[0,"qitoy_data_structure_bit_vec"]],"d":["","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2],3],[[]],[[]],[[1,4],5],[[]],[[[9,[[0,[[7,[6]],8]]]]],1],[[]],[1,2],[[1,2],10],[[1,2],10],[[1,10],[[11,[2]]]],[[1,10],[[11,[2]]]],[[],12],[[],12],[[],13],[[]]],"c":[],"p":[[3,"BitVec"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"u1024"],[8,"Into"],[8,"Copy"],[3,"Vec"],[15,"u32"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_data_structure_wavelet_matrix":{"doc":"","t":"DLLLLLLLLLLLL","n":["WaveletMatrix","access","borrow","borrow_mut","fmt","from","from","into","rank","try_from","try_into","type_id","vzip"],"q":[[0,"qitoy_data_structure_wavelet_matrix"]],"d":["","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2],3],[[]],[[]],[[1,4],5],[[]],[[[6,[3]]],1],[[]],[[1,3,2],7],[[],8],[[],8],[[],9],[[]]],"c":[],"p":[[3,"WaveletMatrix"],[15,"usize"],[15,"u64"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_math_montgomery":{"doc":"モンゴメリ乗算","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Montgomery","Mvalue","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","into","into","mul","neg","new","pow","sub","to_owned","trans","try_from","try_from","try_into","try_into","type_id","type_id","val"],"q":[[0,"qitoy_math_montgomery"]],"d":["モンゴメリ乗算をするための構造体。","モンゴメリ乗算で内部的に使われる型。","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","<code>modulus</code>で前計算をする。ただし<code>modulus</code>…","","","","<code>val</code>をモンゴメリ乗算用に変換する。","","","","","","","保有している数値を取り出す。"],"i":[0,0,1,1,2,1,2,1,1,2,1,2,1,2,1,2,1,1,2,1,1,1,2,1,2,1,2,1,2,1],"f":[0,0,[[1,1]],[[]],[[]],[[]],[[]],[1,1],[[]],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[[]],[[]],[[1,1]],[1],[6,[[7,[2]]]],[[1,6],1],[[1,1]],[[]],[[[7,[2]],6],1],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[1,6]],"c":[],"p":[[3,"Mvalue"],[3,"Montgomery"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"Rc"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_math_numeric":{"doc":"","t":"IIKK","n":["Gcd","Lcm","gcd","lcm"],"q":[[0,"qitoy_math_numeric"]],"d":["","","",""],"i":[0,0,1,2],"f":[0,0,[[]],[[]]],"c":[],"p":[[8,"Gcd"],[8,"Lcm"]]},\
"qitoy_matrix":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","column","fmt","from","from","identity","index","index_mut","into","mul","mul_assign","neg","new","pow","row","sub","sub_assign","to_owned","try_from","try_into","type_id"],"q":[[0,"qitoy_matrix"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],[[[2,[1]]],4],[[[2,[[0,[5,1]]]],6],7],[[[8,[[8,[1]]]]],[[2,[1]]]],[[]],[4,[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]]]],[[4,4],[[2,[1]]]],[[[2,[1]],9],[[2,[1]]]],[[[2,[1]]],4],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[],10],[[],10],[[],11]],"c":[],"p":[[8,"Ring"],[3,"Matrix"],[8,"Clone"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_mo":{"doc":"","t":"DMLLLLMMMMLLLL","n":["Mo","assign","borrow","borrow_mut","from","into","pop_left","pop_right","push_left","push_right","solve","try_from","try_into","type_id"],"q":[[0,"qitoy_mo"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[[2,[1,1,1,1,1]],3]],[[],4],[[],4],[[],5]],"c":[],"p":[[8,"FnMut"],[3,"Mo"],[15,"slice"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_prelude":{"doc":"","t":"IQQIOOKOOOK","n":["LowerBound","T","T","UpperBound","chmax","chmin","lower_bound","max","min","mvec","upper_bound"],"q":[[0,"qitoy_prelude"]],"d":["","","","","","","","","","",""],"i":[0,2,3,0,0,0,2,0,0,0,3],"f":[0,0,0,0,0,0,[[],1],0,0,0,[[],1]],"c":[],"p":[[15,"usize"],[8,"LowerBound"],[8,"UpperBound"]]},\
"qitoy_prime_check":{"doc":"","t":"IK","n":["PrimeCheck","prime_check"],"q":[[0,"qitoy_prime_check"]],"d":["","素数判定をする。"],"i":[0,2],"f":[0,[[],1]],"c":[],"p":[[15,"bool"],[8,"PrimeCheck"]]},\
"qitoy_prime_factorise":{"doc":"","t":"ILK","n":["Factorise","factorise","find_factor"],"q":[[0,"qitoy_prime_factorise"]],"d":["","<code>self</code>…","<code>self</code>…"],"i":[0,6,6],"f":[0,[[[0,[1,2,3,4]]],[[5,[[0,[1,2,3,4]]]]]],[[]]],"c":[],"p":[[8,"Div"],[8,"One"],[8,"Copy"],[8,"PartialOrd"],[3,"Vec"],[8,"Factorise"]]},\
"qitoy_prime_pi":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"qitoy_prime_sieve":{"doc":"","t":"F","n":["eratosthenes"],"q":[[0,"qitoy_prime_sieve"]],"d":["エラトステネスの篩 計算量$<code>O(n \\\\log n)</code>$"],"i":[0],"f":[[1,[[3,[2]]]]],"c":[],"p":[[15,"usize"],[15,"bool"],[3,"Vec"]]},\
"qitoy_rerooting_dp":{"doc":"","t":"DLLLLLLLLLLL","n":["RerootingDP","add_edge","borrow","borrow_mut","build","build_subtree","from","into","new","try_from","try_into","type_id"],"q":[[0,"qitoy_rerooting_dp"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[[2,[1]],3,3]],[[]],[[]],[[[2,[1]],4,4],5],[[[2,[1]],4,4],[[5,[5]]]],[[]],[[]],[3,[[2,[1]]]],[[],6],[[],6],[[],7]],"c":[],"p":[[8,"Monoid"],[3,"RerootingDP"],[15,"usize"],[8,"Fn"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_string_rolling_hash":{"doc":"ローリングハッシュ","t":"DLLLLLLLLLLL","n":["RollingHash","borrow","borrow_mut","from","from","get_hash","into","new","try_from","try_into","type_id","vzip"],"q":[[0,"qitoy_string_rolling_hash"]],"d":["","","","Returns the argument unchanged.","","<code>str[l..r]</code>のハッシュを返します。","Calls <code>U::from(self)</code>.","<code>[u8]</code>…","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[]],[1,2],[[2,3,3]],[[]],[[[5,[4]]],2],[[],6],[[],6],[[],7],[[]]],"c":[],"p":[[15,"str"],[3,"RollingHash"],[15,"usize"],[15,"u8"],[15,"slice"],[4,"Result"],[3,"TypeId"]]},\
"qitoy_utils_bound":{"doc":"配列上の二分探索をします","t":"IQQIKK","n":["LowerBound","T","T","UpperBound","lower_bound","upper_bound"],"q":[[0,"qitoy_utils_bound"]],"d":["","","","","",""],"i":[0,2,3,0,2,3],"f":[0,0,0,0,[[],1],[[],1]],"c":[],"p":[[15,"usize"],[8,"LowerBound"],[8,"UpperBound"]]},\
"qitoy_utils_float2uint":{"doc":"floatとuintを順序を保って相互変換します","t":"QIIQKK","n":["Float","ToFloat","ToUint","Uint","to_float","to_uint"],"q":[[0,"qitoy_utils_float2uint"]],"d":["","","","","",""],"i":[1,0,0,2,1,2],"f":[0,0,0,0,[[]],[[]]],"c":[],"p":[[8,"ToFloat"],[8,"ToUint"]]},\
"verify":{"doc":"","t":"ILKLX","n":["Verify","check","solve","verify","verify"],"q":[[0,"verify"]],"d":["","","","",""],"i":[0,6,6,6,0],"f":[0,[[1,1,1],2],[[1,3]],[4,5],0],"c":[],"p":[[15,"str"],[15,"bool"],[3,"String"],[3,"PathBuf"],[6,"Result"],[8,"Verify"]]},\
"verify_proc":{"doc":"","t":"X","n":["verify"],"q":[[0,"verify_proc"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
